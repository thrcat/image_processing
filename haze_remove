import cv2
import numpy as np
import matplotlib.pyplot as plt
import math
from skimage.metrics import structural_similarity as sk_cpt_ssim

#暗通道
def min_channel(img):
    return np.min(img,axis=2)
def min_filter(img,r):
    kernel = np.ones((2*r-1,2*r-1))
    return cv2.erode(img,kernel)

#大气光照
def get_A(img_haze,dark_channel,bins_l):
    hist,bins = np.histogram(dark_channel,bins=bins_l)
    d = np.cumsum(hist)/float(dark_channel.size)
    # print(bins)
    threshold=0
    for i in range(bins_l-1,0,-1):
        if d[i]<=0.999:
            threshold=i
            break
    A = img_haze[dark_channel>=bins[threshold]].max()

    show  = np.copy(img_haze)
    show[dark_channel>=bins[threshold]] = 0,0,255
    cv2.imwrite('./most_haze_opaque_region.jpg',show*255)
    return A

#投射图
def get_t(img_haze,A,t0=0.1,w=0.95):
    out = min_channel(img_haze)
    out = min_filter(out,r=7)
    t = 1-w*out/A 
    t = np.clip(t,t0,1)
    return t

#导向滤波
def guided_filter(I,p,win_size,eps):

    mean_I = cv2.blur(I,(win_size,win_size))
    mean_p = cv2.blur(p,(win_size,win_size))

    corr_I = cv2.blur(I*I,(win_size,win_size))
    corr_Ip = cv2.blur(I*p,(win_size,win_size))

    var_I = corr_I-mean_I*mean_I
    cov_Ip = corr_Ip - mean_I*mean_p

    a = cov_Ip/(var_I+eps)
    b = mean_p-a*mean_I

    mean_a = cv2.blur(a,(win_size,win_size))
    mean_b = cv2.blur(b,(win_size,win_size))

    q = mean_a*I + mean_b
    return q


#main
I = cv2.imread(r'C:\Users\86139\Desktop\foggy city.jpg')/255.0
dark_channel = min_channel(I)
dark_channel_1 = min_filter(dark_channel,r=7)

A = get_A(I,dark_channel_1,bins_l=2000)

t = get_t(I,A)
t = guided_filter(dark_channel,t,81,0.001)
t = t[:,:,np.newaxis].repeat(3,axis=2)#升维至(r,w,3)

J = (I-A)/t +A

J = np.clip(J,0,1)
J = J*255
J =np.uint8(J)

cv2.imwrite(r"C:\Users\86139\Desktop\foggy city result.jpg",J)
