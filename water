import cv2
import numpy as np
from queue import Queue

maxhigh = 255 #水位
mask = -2     #标记已淹没
watershed = 0 #边缘

def checkedge(inputidx,w,h):
    if inputidx[0] >= h:
        return -1
    if inputidx[1] >= w:
        return -1
    if inputidx[0] < 0:
        return -1
    if inputidx[1] < 0:
        return -1
    return 0

#分水岭
def water(inputimg, size):
    imsize = size[0]*size[1]
    w = size[1]
    h = size[0]
    pixarray = np.zeros([imsize,2])
    labelout = np.zeros(size)-1
    putquemask = np.zeros(size)
    labelsize = np.zeros(imsize)
    cnt = np.zeros(257)
    currenLabel = 0
    que = Queue(maxsize=0)
    neighborbias4 = np.array([[0,-1],[-1,0],[0,1],[1,0]])

    #直方图
    hist = cv2.calcHist([inputimg],[0],None,[256],[0,256])
    hist[0] = hist[0] - 1
    histsum = 0
    for i in range(0,256):
        histsum = histsum + hist[i]
        cnt[i+1] = histsum
    
    cnt = cnt.astype(np.int32)
    cntidx = cnt[1:257].copy()
   
    #遍历并从低到高注水
    for y in range(0,h):
        for x in range(0,w):
            
            pix = inputimg[y,x]
            pixarray[(cntidx[pix]),:] = y,x
 
            cntidx[pix] = cntidx[pix] - 1
            
    #注水！
    for nowgraylevel in range(0,maxhigh+1):
        print(nowgraylevel)
        for idx in range(cnt[nowgraylevel],cnt[nowgraylevel+1]+1):
            nowpixaxis = pixarray[idx].astype(np.int32)
            labelout[nowpixaxis[0],nowpixaxis[1]] = mask
            for nei in range(0,4):
                neighboraxis  = nowpixaxis + neighborbias4[nei]
                if checkedge(neighboraxis,w,h) < 0:
                    continue
                if labelout[neighboraxis[0],neighboraxis[1]] >= 0:
                    putquemask[neighboraxis[0],neighboraxis[1]] > 0
                    que.put(nowpixaxis)
                    break

        while 1:
            if que.empty():
                break
            nowpixaxis = que.get()
            for nei in range(0,4):
                neighboraxis  = nowpixaxis + neighborbias4[nei]
                if checkedge(neighboraxis,w,h) < 0:
                    continue
                labelnow = labelout[nowpixaxis[0],nowpixaxis[1]]
                labelneighbor = int(labelout[neighboraxis[0],neighboraxis[1]])
                
                if labelnow == -2 and labelneighbor > 0:
                    labelout[nowpixaxis[0],nowpixaxis[1]] = labelneighbor
                    labelsize[labelneighbor] = labelsize[labelneighbor] + 1
                    
                elif labelnow > 0 and labelneighbor > 0 and labelnow != labelneighbor:
                    labelout[nowpixaxis[0],nowpixaxis[1]] = 0
                    
                if labelneighbor == -2 and putquemask[neighboraxis[0],neighboraxis[1]] == 0:
                    que.put(neighboraxis)
                    putquemask[neighboraxis[0],neighboraxis[1]] = 1

        for idx in range(cnt[nowgraylevel],cnt[nowgraylevel+1]+1):
            nowpixaxis = pixarray[idx,:].astype(np.int32)
            if(labelout[nowpixaxis[0],nowpixaxis[1]] == -2):
                currenLabel = currenLabel + 1
                labelout[nowpixaxis[0],nowpixaxis[1]] = currenLabel
                que.put(nowpixaxis)
                while not que.empty():
                    nowpixaxis = que.get()
                    for nei in range(0,4):
                        neighboraxis = nowpixaxis + neighborbias4[nei]
                        if checkedge(neighboraxis,w,h) < 0:
                            continue
                        if  putquemask[neighboraxis[0],neighboraxis[1]] == 0 and labelout[neighboraxis[0],neighboraxis[1]] == -2:
                          
                            labelout[neighboraxis[0],neighboraxis[1]] = currenLabel
                            que.put(neighboraxis)
                            putquemask[neighboraxis[0],neighboraxis[1]] = 1
                            labelsize[currenLabel] = labelsize[currenLabel] + 1
    return labelout    

#main
image = cv2.imread(r'C:\Users\86139\Desktop\image_processing\lena.jpg')
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY, cv2.CV_16S)
size = gray.shape  # h w c
ret,gray = cv2.threshold(gray,40,255,cv2.THRESH_BINARY)
cv2.imshow("ret",gray)
cv2.waitKey(0)

#边缘检测
edgeimage = cv2.Canny(gray, 10, 100) 
cv2.imshow("gray",edgeimage)
cv2.waitKey(0)
label = water(edgeimage,size)
